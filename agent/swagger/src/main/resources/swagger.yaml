  swagger: '2.0'
  info:
    version: 0.0.0
    title: Deployment Agent
  paths:
    /task:
      get:
        tags:
        - tasks
        summary: Get list of tasks
        description: List of tasks on tasks
        operationId: getTasks
        produces:
        - application/xml
        - application/json
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/Tasks'
    /task/{taskId}:
      get:
        tags:
        - tasks
        summary: Get task information
        operationId: getTask
        produces:
        - application/xml
        - application/json
        parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          type: string
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/TaskInfo'
          400:
            description: Invalid ID
          404:
            description: Task not found
        security:
        - api_key: []
      delete:
        tags:
        - tasks
        summary: Delete task
        operationId: deleteTask
        produces:
        - application/xml
        - application/json
        parameters:
        - name: taskId
          in: path
          description: ID of task to delete
          required: true
          type: string
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/TaskInfo'
          400:
            description: Invalid ID
          404:
            description: Task not found
    /task/{taskId}/log:
      get:
        tags:
        - tasks
        summary: Get task's log
        operationId: getLog
        produces:
        - application/xml
        - application/json
        parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          type: integer
        - name: skip
          in: query
          description: Number of records to skip
          required: false
          type: integer
        - name: count
          in: query
          description: Number of records to return
          required: false
          type: integer
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/TaskLog'
          400:
            description: Invalid ID
          404:
            description: Task not found

    /vm:
      post:
        tags:
        - vm
        summary: "Create new VM"
        description: "Submit task to create new VM"
        operationId: createVM
        consumes:
        - application/json
        - application/xml
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vm
          in: body
          description: VM to deploy
          required: true
          schema:
            $ref: '#/definitions/VM'
        responses:
          202:
            description: Accepted, task id
            schema:
              type: string
          405:
            description: Invalid input
    /vm/{vmId}:
      get:
        tags:
        - vm
        summary: Get VM information
        operationId: getVM
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM to return
          required: true
          type: string
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/VMInfo'
          400:
            description: Invalid ID
          404:
            description: VM not found
      put:
        tags:
        - vm
        summary: Update VM
        operationId: updateVM
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM to update
          required: true
          type: string
        - name: vmInfo
          in: body
          required: true
          schema:
            $ref: '#/definitions/VM'
        responses:
          202:
            description: Accepted, task id
            schema:
              type: string
          400:
            description: Invalid ID
          404:
            description: VM not found
      delete:
        tags:
        - vm
        summary: Delete VM
        operationId: deleteVM
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM to delete
          required: true
          type: string
        responses:
          202:
            description: Accepted, task id
            schema:
              type: string
          400:
            description: Invalid ID
          404:
            description: VM not found
    /vm/{vmId}/firewall:
      get:
        tags:
        - vm
        summary: Get VM firewall rules information
        operationId: getVMFirewallRules
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM to return
          required: true
          type: string
        responses:
          200:
            description: Successful
            schema:
              $ref: '#/definitions/FirewallInfo'
          400:
            description: Invalid ID
          404:
            description: VM not found
      put:
        tags:
        - vm
        summary: Update VM firewall rules
        operationId: updateVMFirewallRules
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM to update firewall rules
          required: true
          type: string
        - name: firewallUpdate
          in: body
          required: true
          schema:
            $ref: '#/definitions/FirewallUpdate'
        responses:
          202:
            description: Accepted, task id
            schema:
              type: string
          400:
            description: Invalid ID
          404:
            description: VM not found

    /vm/{vmId}/upload:
      put:
        tags:
        - vm
        summary: Upload file to VM
        operationId: uploadFile
        consumes:
        - multipart/form-data
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM for file upload
          required: true
          type: string
        - name: file
          in: formData
          type: file
        responses:
          200:
            description: Successful
    /vm/{vmId}/execute:
      put:
        tags:
        - vm
        summary: Execute command on VM
        operationId: executeScript
        consumes:
        - application/xml
        - application/json
        produces:
        - application/xml
        - application/json
        parameters:
        - name: vmId
          in: path
          description: ID of VM for command execution
          required: true
          type: string
        - name: command
          in: body
          required: true
          schema:
            $ref: '#/definitions/Command'
        responses:
          202:
            description: Accepted, task id
            schema:
              type: string
          405:
            description: Invalid input
  securityDefinitions:
    api_key:
      type: apiKey
      name: api_key
      in: header
  definitions:
    VM:
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
    FirewallInfo:
      properties:
        rules:
          type: array
          items:
            $ref: '#/definitions/FirewallRule'
    FirewallUpdate:
      properties:
        create:
          type: array
          items:
            $ref: '#/definitions/FirewallRule'
        delete:
          type: array
          items:
            $ref: '#/definitions/FirewallRule'
    FirewallRule:
      properties:
        protocol:
          type: string
        port:
          type: string
        from:
          type: string
    Tasks:
      properties:
        tasks:
          type: array
          items:
            $ref: '#/definitions/TaskInfo'
    TaskInfo:
      properties:
        status:
          type: string
    TaskLog:
      properties:
        entries:
          type: array
          items:
            type: string
    VMInfo:
      properties:
        status:
          type: string

    Command:
      properties:
        command:
          type: string